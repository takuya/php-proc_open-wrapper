<?php

namespace Tests\Unit\ProcOpen;

use Tests\TestCase;
use Takuya\ProcOpen\ProcOpen;

class ProcOpenTest extends TestCase {
  
  public function test_proc_open () {
    $p = new ProcOpen( ['/usr/bin/php', '-i'] );
    $p->start();
    $p->wait();
    $out = stream_get_contents( $p->stdout() );
    $arr = preg_grep( '/^PWD => (.+)$/', preg_split( "/\n/", $out ) );
    $this->assertGreaterThan( 0, sizeof( $arr ) );
  }
  
  public function test_proc_open_with_input () {
    $p = new ProcOpen( ['/usr/bin/php'] );
    $p->setInput(
      <<<'EOS'
    <?php
      $stdout = fopen( 'php://stdout', 'w' );
      $stderr = fopen( 'php://stderr', 'w' );
      foreach(range(1,100) as $i ){
        fwrite($stdout, sprintf("hello:%10s\n",$i));
        fwrite($stderr, sprintf("error:%10s\n",$i));
        fflush($stdout);
        fflush($stderr);
        usleep(1000);
      }
    EOS
    );
    $p->start();
    $p->wait();
    $this->assertEquals( 100, mb_substr_count( stream_get_contents( $p->stdout() ), 'hello' ) );
    $this->assertEquals( 100, mb_substr_count( stream_get_contents( $p->stderr() ), 'error' ) );
  }
  
  public function test_proc_open_pipes () {
    $p1 = new ProcOpen( ['/bin/echo', '<?php echo "Hello";'] );
    $p1->start();
    $p2 = new ProcOpen( ['/usr/bin/php'] );
    $p2->setInput( $p1->stdout() );
    $p2->start();
    $p1->wait();
    $p2->wait();
    $this->assertEquals( "Hello", stream_get_contents( $p2->stdout() ) );
  }
}